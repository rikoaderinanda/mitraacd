<style>
    .modal.fade .modal-dialog {
        transition: transform 0.8s cubic-bezier(.4, 0, .2, 1), opacity 0.3s cubic-bezier(.4, 0, .2, 1);
        transform: translateY(40px) scale(0.98);
        opacity: 0;
    }

    .modal.fade.show .modal-dialog {
        transform: translateY(0) scale(1);
        opacity: 1;
    }

    #previewContainer img {
        transition: transform 0.3s ease;
    }

    #previewContainer img:hover {
        transform: scale(1.05);
        cursor: pointer;
    }

    .camera-actions {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 15px;
        z-index: 10;
    }

    .camera-actions button {
        width: 56px;
        height: 56px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>
<div class="modal fade" id="ShowCamera" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-fullscreen-sm-down">
    <div class="modal-content shadow-lg border-0 rounded-4">
      
      <!-- Header Gradient Merah -->
      <div class="modal-header text-white rounded-top-4" style="background: linear-gradient(135deg, #d63031, #c0392b);">
        <h5 class="modal-title" id="addAddressModalLabel">
          <i class="bi bi-camera-video me-2"></i>  Foto Unit sebelum Pengerjaan
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <!-- Modal Body -->
        <div class="modal-body p-4 bg-light">
            <div class="text-center mb-3">
                <p class="fs-6 fw-semibold text-dark">
                ðŸ“· Silakan ambil Foto Suhu unit Indoor, Tekanan Freon, & Ampere Unit
                </p>
            </div>
            <!-- Preview Foto -->
            <div class="row g-3 mt-0 mb-2" id="previewContainer">
                <!-- Foto 1 -->
                <div class="col-4 text-center" id="can1">
                    <div class="border rounded-3 p-0 shadow-sm position-relative bg-white">
                        <h6 class="fw-semibold small text-primary mb-2 mt-2 p-1">1. Suhu</h6>
                        <img id="photo1" class="img-fluid rounded mb-0 preview-photo" data-index="1" style="display: none; max-height: 100px; object-fit: cover; cursor: pointer;" />
                        <button id="redo1" class="btn btn-sm btn-outline-danger rounded-pill mt-1 small w-100" style="display: none;" onclick="redoPhoto(1)">
                            <i class="bi bi-arrow-clockwise me-1"></i> Ulangi
                        </button>
                        <!-- Input hasil pengukuran suhu -->
                        <div class="p-2">
                            <input 
                            type="number" step="0.1" required
                            @* min="15" max="30" *@
                            class="form-control form-control-sm" 
                            id="inputSuhu" placeholder="(Â°C)"
                            >
                            @* <div class="invalid-feedback small">Suhu harus antara 15â€“30 Â°C.</div> *@
                        </div>
                    </div>
                </div>

                <!-- Foto 2 -->
                <div class="col-4 text-center" id="can2">
                    <div class="border rounded-3 p-0 shadow-sm position-relative bg-white">
                        <h6 class="fw-semibold small text-primary mb-2 mt-2 p-1">2. Tekanan</h6>
                        <img id="photo2" class="img-fluid rounded mb-0 preview-photo" data-index="2" style="display: none; max-height: 100px; object-fit: cover; cursor: pointer;" />
                        <button id="redo2" class="btn btn-sm btn-outline-danger rounded-pill mt-1 small w-100" style="display: none;" onclick="redoPhoto(2)">
                            <i class="bi bi-arrow-clockwise me-1"></i> Ulangi
                        </button>
                        <!-- Input hasil pengukuran tekanan freon -->
                        <div class="p-2">
                            <input type="number" step="0.1" 
                            @* min="60" max="120"  *@
                            required
                            class="form-control form-control-sm" id="inputTekanan" placeholder="(PSI)">
                            @* <div class="invalid-feedback small">Tekanan harus antara 60â€“120 PSI.</div> *@
                        </div>
                    </div>
                </div>

                <!-- Foto 3 -->
                <div class="col-4 text-center" id="can3">
                    <div class="border rounded-3 p-0 shadow-sm position-relative bg-white">
                        <h6 class="fw-semibold small text-primary mb-2 mt-2 p-1">3. Ampere</h6>
                        <img id="photo3" class="img-fluid rounded mb-0 preview-photo" data-index="3" style="display: none; max-height: 100px; object-fit: cover; cursor: pointer;" />
                        <button id="redo3" class="btn btn-sm btn-outline-danger rounded-pill mt-1 small w-100" style="display: none;" onclick="redoPhoto(3)">
                            <i class="bi bi-arrow-clockwise me-1"></i> Ulangi
                        </button>
                        <!-- Input hasil pengukuran ampere -->
                        <div class="p-2">
                            <input type="number" step="0.1" 
                            @* min="1" max="10"  *@
                            required 
                            class="form-control form-control-sm" id="inputAmpere" placeholder="(Amp)">
                            @* <div class="invalid-feedback small">Tekanan harus antara 1-10 Ampere.</div> *@
                        </div>
                    </div>
                </div>
            </div>

            <!-- Area Kamera -->
            <div class="rounded-3 overflow-hidden shadow-sm mb-3" style="border: 2px dashed #d63031;" id="panelCamera">
                <video id="videoPreview" autoplay playsinline width="100%" height="auto"></video>
                <canvas id="canvasPhoto" style="display: none;"></canvas>
                <div class="camera-actions">
                    <button class="btn btn-primary rounded-circle shadow" onclick="switchCamera()" title="Ganti Kamera">
                        <i class="bi bi-arrow-repeat fs-5"></i>
                    </button>
                    <button class="btn btn-danger rounded-circle shadow" onclick="capturePhoto()" title="Ambil Foto">
                        <i class="bi bi-camera fs-4"></i>
                    </button>
                </div>
            </div>

            <div id="panelInputHasilPengukuran" class="d-none">
                <div class="card border rounded-3 shadow-sm p-3 mb-3">
                  <h5 class="fw-semibold text-primary">Kondisi Unit Indoor</h5>

                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="kondisiIndoor" id="indoorNormal" value="Normal" checked>
                    <label class="form-check-label" for="indoorNormal">Normal</label>
                  </div>

                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="kondisiIndoor" id="indoorAbnormal" value="Abnormal">
                    <label class="form-check-label" for="indoorAbnormal">Abnormal</label>
                  </div>

                  <!-- Form Abnormal Indoor -->
                  <div id="indoorAbnormalForm" class="mt-2" style="display:none;">
                    <textarea class="form-control form-control-sm mb-2" id="catatanIndoor" placeholder="Catatan abnormal"></textarea>
                  </div>
                </div>

                <div class="card border rounded-3 shadow-sm p-3 mb-3">
                  <h5 class="fw-semibold text-primary">Kondisi Unit Outdoor</h5>

                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="kondisiOutdoor" id="outdoorNormal" value="Normal" checked>
                    <label class="form-check-label" for="outdoorNormal">Normal</label>
                  </div>

                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="kondisiOutdoor" id="outdoorAbnormal" value="Abnormal">
                    <label class="form-check-label" for="outdoorAbnormal">Abnormal</label>
                  </div>

                  <!-- Form Abnormal Outdoor -->
                  <div id="outdoorAbnormalForm" class="mt-2" style="display:none;">
                    <textarea class="form-control form-control-sm mb-2" id="catatanOutdoor" placeholder="Catatan abnormal"></textarea>
                  </div>
                </div>

                <div class="text-center mt-4">
                    <button type="button" class="btn btn-success px-4 rounded-pill" onclick="ProsesLanjutan()">
                        <i class="bi bi-send-fill me-2"></i> Submit Hasil
                    </button>
                </div>
            </div>
        </div>
    
    </div>
  </div>
</div>

<script>
let Id_SC;

let currentFacingMode = 'environment';
let cameraStream = null;
let video = document.getElementById('videoPreview');
let canvas = document.getElementById('canvasPhoto');
let currentPhotoIndex = 1;
const maxPhotos = 3;
let photoTaken = [false, false, false];




// Indoor
const indoorNormal = document.getElementById("indoorNormal");
const indoorAbnormal = document.getElementById("indoorAbnormal");
const indoorAbnormalForm = document.getElementById("indoorAbnormalForm");
// Outdoor
const outdoorNormal = document.getElementById("outdoorNormal");
const outdoorAbnormal = document.getElementById("outdoorAbnormal");
const outdoorAbnormalForm = document.getElementById("outdoorAbnormalForm");

indoorNormal.addEventListener("change", () => {
  indoorAbnormalForm.style.display = "none";
});
indoorAbnormal.addEventListener("change", () => {
  indoorAbnormalForm.style.display = "block";
});

outdoorNormal.addEventListener("change", () => {
  outdoorAbnormalForm.style.display = "none";
});
outdoorAbnormal.addEventListener("change", () => {
  outdoorAbnormalForm.style.display = "block";
});

$('#ShowCamera').on('hidden.bs.modal', function () {
    stopCamera();
    resetPhotos();
});

$('#ShowCamera').on('show.bs.modal', function () {
    clearAllInputs();
    // Id_SC ambil dari atribut data di elemen modal
    Id_SC = $(this).data("id");
    id_pelanggan = $(this).data("id_pelanggan");
    // Kalau mau ambil dari tombol pemicu modal:
    if (e.relatedTarget) {
        Id_SC = $(e.relatedTarget).data("id");
    }
    
    Swal.fire({
        title: 'Mengaktifkan Kamera',
        html: '<i class="fas fa-spinner fa-spin fa-2x" style="color:#3085d6;"></i><p>Mohon tunggu sebentar...</p>',
        allowOutsideClick: false,
        showConfirmButton: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });
    
    stopCamera(); // Hentikan kamera aktif
    currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user'; // toggle
    //startCamera(Id_SC);
    startCamera(Id_SC)
    .then(() => Swal.close())
    .catch(err => {
        Swal.fire('Error', 'Gagal mengaktifkan kamera: ' + err.message, 'error');
    });
});

$('.preview-photo').on('click', function () {
    var index = $(this).data('index');
    // Sembunyikan semua tombol dulu
    $('[id^=redo]').hide();

    // Tampilkan tombol hanya untuk yang diklik
    $('#redo' + index).show();
});
// Jika klik di luar elemen gambar preview, sembunyikan semua tombol ulangi
$(document).on('click', function () {
    $('[id^=redo]').hide();
});

// Cegah klik tombol "Ulangi" juga tidak dianggap klik luar
$('[id^=can]').on('click', function (e) {
    e.stopPropagation();
});

const formInputs = document.querySelectorAll("#previewContainer input");

formInputs.forEach(input => {
    input.addEventListener("input", () => {
        if (input.checkValidity()) {
            input.classList.remove("is-invalid");
            input.classList.add("is-valid");
        } else {
            input.classList.remove("is-valid");
            input.classList.add("is-invalid");
        }
    });
});

function clearAllInputs() {
  // Reset semua input angka (suhu, tekanan, ampere)
  $('#inputSuhu').val('').removeClass('is-valid is-invalid');
  $('#inputTekanan').val('').removeClass('is-valid is-invalid');
  $('#inputAmpere').val('').removeClass('is-valid is-invalid');

  // Reset radio kondisi indoor & outdoor
  $('#indoorNormal').prop('checked', true);
  $('#outdoorNormal').prop('checked', true);

  // Sembunyikan form abnormal
  $('#indoorAbnormalForm').hide();
  $('#outdoorAbnormalForm').hide();

  // Hapus isi textarea catatan
  $('#catatanIndoor').val('');
  $('#catatanOutdoor').val('');

  // Reset foto dan urutan pengambilan
  resetPhotos();

  // Kembalikan tampilan ke panel kamera (bukan input pengukuran)
  $("#panelCamera").removeClass("d-none");
  $("#panelInputHasilPengukuran").addClass("d-none");
}

function switchCamera() {
  stopCamera(); // Hentikan kamera aktif
  currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user'; // toggle
  startCamera(Id_SC); // Mulai kamera lagi
}

function startCamera(Id) {
  return navigator.mediaDevices.getUserMedia({
    video: { facingMode: currentFacingMode }
  })
    .then(function (stream) {
      cameraStream = stream;
      video.srcObject = stream;
      return stream; // return supaya .then di luar bisa dipanggil
    })
    .catch(function (err) {
      console.error("Gagal mengakses kamera:", err);
      throw err; // biar bisa ditangkap di .catch luar
    });
}

function stopCamera() {
  if (cameraStream) {
    cameraStream.getTracks().forEach(track => track.stop());
    cameraStream = null;
  }
}

function capturePhoto() {
  if (currentPhotoIndex > maxPhotos) {
    ProsesLanjutan();
  }
  
  let context = canvas.getContext('2d');
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  context.drawImage(video, 0, 0, canvas.width, canvas.height);
  let imageData = canvas.toDataURL('image/png');

  $(`#photo${currentPhotoIndex}`).attr('src', imageData).show();
  $(`#photo${currentPhotoIndex}`).next('button').hide();
  photoTaken[currentPhotoIndex - 1] = true;
  
  for (let i = 1; i <= maxPhotos; i++) {
    if (!photoTaken[i - 1]) {
      currentPhotoIndex = i;
      return;
    }
  }

  currentPhotoIndex = maxPhotos + 1;
  
  if (currentPhotoIndex > maxPhotos) {
    InputHasilPengukuran();
  }
}

function InputHasilPengukuran(){
    $("#panelCamera").addClass("d-none");
    $("#panelInputHasilPengukuran").removeClass("d-none");
}

function ProsesLanjutan(){
  stopCamera();
  let idxEmpety = 0;
  const formInputs_abc = document.querySelectorAll("#previewContainer input");
  formInputs_abc.forEach(input => {
      if (input.checkValidity()) {
          input.classList.remove("is-invalid");
          input.classList.add("is-valid");
          
      } else {
          input.classList.remove("is-valid");
          input.classList.add("is-invalid");
          idxEmpety++;
      }
  });
  console.log(idxEmpety);

  const Suhu = document.getElementById('inputSuhu').value.trim();
  const Tekanan = document.getElementById('inputTekanan').value.trim();
  const Ampere = document.getElementById('inputAmpere').value.trim();
  

  const kondisiIndoor = document.querySelector('input[name="kondisiIndoor"]:checked').value;
  const catatanIndoor = document.getElementById('catatanIndoor').value.trim();

  // ambil kondisi outdoor
  const kondisiOutdoor = document.querySelector('input[name="kondisiOutdoor"]:checked').value;
  const catatanOutdoor = document.getElementById('catatanOutdoor').value.trim();

  // === Validasi ===
  if (kondisiIndoor === "Abnormal" && catatanIndoor === "") {
      showToast("Catatan untuk kondisi Indoor wajib diisi jika Abnormal.");
      document.getElementById('catatanIndoor').focus();
      return;
  }

  if (kondisiOutdoor === "Abnormal" && catatanOutdoor === "") {
      showToast("Catatan untuk kondisi Outdoor wajib diisi jika Abnormal.");
      document.getElementById('catatanOutdoor').focus();
      return;
  }
  // bungkus dalam object
  var hasil_ukur_awal = {
      suhu : Suhu,
      tekanan : Tekanan,
      ampere : Ampere,
      indoor: {
          kondisi: kondisiIndoor,
          catatan: kondisiIndoor === "Abnormal" ? catatanIndoor : null
      },
      outdoor: {
          kondisi: kondisiOutdoor,
          catatan: kondisiOutdoor === "Abnormal" ? catatanOutdoor : null
      }
  };  

  //console.log(hasil_ukur_awal);
  if(idxEmpety == 0){
    Swal.fire({
          title: '<strong>ðŸ“¸ Pengecekan awal selesai !</strong>',
          html: `
              <div style="font-size: 15px; color: #555;">
                  Semua <b> Pengukuran </b> telah diambil.<br>
                  Apakah kamu ingin melanjutkan ke <b>Pengerjaan</b>?
              </div>
          `,
          icon: 'info',
          showCancelButton: true,
          confirmButtonText: '<i class="bi bi-check-circle-fill"></i> Iya, lanjut',
          cancelButtonText: '<i class="bi bi-arrow-clockwise"></i> Batal',
          reverseButtons: true,
          background: '#f9f9f9',
          
          customClass: {
              popup: 'shadow rounded-4',
              confirmButton: 'btn btn-success rounded-pill px-4 py-2 mx-2',
              cancelButton: 'btn btn-outline-danger rounded-pill px-4 py-2 mx-2'
          },
          buttonsStyling: false
      }).then((result) => {
          if (result.isConfirmed) {
              lanjutLayanan(hasil_ukur_awal);
          } 
      });
  }
}

function lanjutLayanan(hasil_ukur_awal) {
    console.log(Id_SC);
    console.log(hasil_ukur_awal);

    const formData = new FormData();
    for (let i = 1; i <= 3; i++) {
        const img = document.getElementById(`photo${i}`);
        if (img && img.style.display !== 'none' && img.src.startsWith('data:image')) {
            const blob = dataURLToBlob(img.src);
            formData.append('imageFiles', blob, `photo${i}.jpg`);
        }
    }

    if (!formData.has('imageFiles')) {
        Swal.fire('Gagal', 'Tidak ada gambar yang dipilih.', 'warning');
        return;
    }

    formData.append('IdTask', Id_SC);
    formData.append('pengukuran_awal', JSON.stringify(hasil_ukur_awal));

    // ðŸŸ¦ Buat instance XMLHttpRequest manual agar bisa monitor progress
    const xhr = new XMLHttpRequest();
    xhr.open("POST", "/api/Cloudinary/PhotoBeforeUpload", true);

    // ðŸ§  Hitung progress upload
    let startTime = 0;
    xhr.upload.onloadstart = () => {
        startTime = Date.now();

        Swal.fire({
            title: '<div style="font-size: 20px; font-weight: 600;">Mengunggah Foto Unit</div>',
            html: `
                <div style="width:100%;text-align:center;">
                    <div id="progress-text" style="margin-bottom:5px;font-size:14px;">0%</div>
                    <div style="width:100%;background:#eee;border-radius:10px;height:20px;">
                        <div id="progress-bar" style="width:0%;height:100%;background:#3085d6;border-radius:10px;transition:width 0.2s;"></div>
                    </div>
                    <div id="eta" style="margin-top:8px;font-size:12px;color:#666;">Estimasi: menghitung...</div>
                </div>
            `,
            allowOutsideClick: false,
            showConfirmButton: false,
            background: '#fff'
        });
    };

    xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
            const percent = Math.round((event.loaded / event.total) * 100);
            const progressBar = document.getElementById('progress-bar');
            const progressText = document.getElementById('progress-text');
            const etaText = document.getElementById('eta');

            if (progressBar && progressText) {
                progressBar.style.width = `${percent}%`;
                progressText.textContent = `${percent}%`;
            }

            // Hitung estimasi waktu
            const elapsed = (Date.now() - startTime) / 1000; // detik
            const speed = event.loaded / elapsed; // byte per detik
            const remainingBytes = event.total - event.loaded;
            const remainingTime = remainingBytes / speed;
            const eta = Math.ceil(remainingTime);

            if (etaText) {
                etaText.textContent = `Estimasi selesai dalam ${eta}s`;
            }
        }
    };

    xhr.onload = () => {
        Swal.close();

        if (xhr.status === 200) {
            const res = JSON.parse(xhr.responseText);
            console.log(res);
            if (res.success) {
                LoadListTask(hari, status);
                callUpdateStatusPadaPelanggan(id_pelanggan, "teknisi mulai bekerja");
                $("#ModalPengerjaanPhoto").attr("data-id", Id_SC);
                $("#ModalPengerjaanPhoto").attr("data-id_pelanggan", id_pelanggan);
                $("#ModalPengerjaanPhoto").modal("show");
                $('#ShowCamera').modal('hide');
            } else {
                showToast(res.message);
            }
        } else {
            Swal.fire('Error', 'Gagal upload foto (status: ' + xhr.status + ')', 'error');
        }
    };

    
    xhr.onerror = () => {
        Swal.close();
        Swal.fire('Error', 'Terjadi kesalahan jaringan saat upload.', 'error');
    };

    // Kirim form
    xhr.send(formData);
}



function redoPhoto(index) {
  $("#panelCamera").removeClass("d-none");
  $("#panelInputHasilPengukuran").addClass("d-none");
  photoTaken[index - 1] = false;
  currentPhotoIndex = index;
  $(`#photo${index}`).attr('src', '').hide();
  $(`#photo${index}`).next('button').hide();

  for (let i = 1; i <= maxPhotos; i++) {
    if (!photoTaken[i - 1]) {
      currentPhotoIndex = i;
      return;
    }
  }
  
}

function resetPhotos() {
  currentPhotoIndex = 1;
  photoTaken = [false, false, false, false, false];
  for (let i = 1; i <= maxPhotos; i++) {
    $(`#photo${i}`).attr('src', '').hide();
    $(`#photo${i}`).next('button').hide();
  }
  
}
</script>